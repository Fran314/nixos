{ lib, pkgs, config, ... }:

with lib; {
    options.my.options.generic = {
        enable = mkEnableOption "";
    };

    config = let
        keep-images = pkgs.callPackage ./keep-images {};
        batch-rename = pkgs.writeShellApplication {
            name = "batch-rename";
            runtimeInputs = with pkgs; [
                gnused
            ];
            text = builtins.readFile ./batch-rename;
        };
        img-resize = pkgs.writeShellApplication {
            name = "img-resize";
            runtimeInputs = with pkgs; [
                imagemagick
            ];
            text = builtins.readFile ./img-resize;
        };
        ctex = pkgs.writeShellApplication {
            name = "ctex";
            runtimeInputs = with pkgs; [
                bash
                texliveFull
                entr
            ];
            text = builtins.readFile ./ctex;
        };
        bookletify = pkgs.writers.writePython3Bin "bookletify" {
            libraries = with pkgs; [
                python3Packages.pypdf2
            ];
            flakeIgnore = [
                "E265"  # Ignore error generated by shebang (block comment should start with '# ')
                "E501"  # Ignore 'line too long' errors
            ];
        } (builtins.readFile ./bookletify);
        poke2term = pkgs.writers.writePython3Bin "poke2term" {
            libraries = [
                pkgs.python3Packages.requests
                pkgs.python3Packages.pillow
            ];
            flakeIgnore = [
                "E265"  # Ignore error generated by shebang (block comment should start with '# ')
                "E501"  # Ignore 'line too long' errors
            ];
        } (builtins.readFile ./poke2term);
    in mkIf config.my.options.generic.enable {
        environment.systemPackages = [
            keep-images
            batch-rename
            img-resize
            ctex
            bookletify
            poke2term
        ];
    };
}
