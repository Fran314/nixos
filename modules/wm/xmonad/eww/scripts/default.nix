{
  lib,
  config,
  pkgs,
  my-utils,
  ...
}:

with lib;

let
  cfg = config.my.options.wm.xmonad.eww;

  parse-name-aliases = pkgs.writeShellApplication {
    name = "parse-name-aliases";
    runtimeInputs = with pkgs; [
      gnused
    ];
    text = builtins.readFile ./parse-name-aliases;
  };

  parse-name-icons = pkgs.writeShellApplication {
    name = "parse-name-icons";
    runtimeInputs = with pkgs; [
      gnused
    ];
    text = builtins.readFile ./parse-name-icons;
  };

  format-bytes = (
    pkgs.writers.writePython3Bin "format-bytes" {
      flakeIgnore = [
        "E265" # Ignore error generated by shebang (block comment should start with '# ')
        "E501" # Ignore 'line too long' errors
      ];
    } (builtins.readFile ./format-bytes)
  );

  get-workspaces-info = (
    pkgs.writers.writePython3Bin "get-workspaces-info" {
      flakeIgnore = [
        "E265" # Ignore error generated by shebang (block comment should start with '# ')
        "E501" # Ignore 'line too long' errors
        "W503" # line break before binary operator
      ];
    } (builtins.readFile ./get-workspaces-info)
  );
  get-mute = (
    pkgs.writeShellApplication {
      name = "get-mute";
      runtimeInputs = with pkgs; [
        pamixer
      ];
      text = builtins.readFile ./get-mute;
    }
  );
  get-sink = (
    pkgs.writeShellApplication {
      name = "get-sink";
      runtimeInputs = with pkgs; [
        pamixer
        findutils # xargs
        gnugrep
        coreutils # cut
        parse-name-aliases
        parse-name-icons
      ];
      text = builtins.readFile ./get-sink;
    }
  );
  get-volume = (
    pkgs.writeShellApplication {
      name = "get-volume";
      runtimeInputs = with pkgs; [
        pamixer
      ];
      text = builtins.readFile ./get-volume;
    }
  );

in
mkIf cfg.enable {
  environment.systemPackages = [
    (pkgs.writeShellApplication {
      name = "get-bluetooth";
      runtimeInputs = with pkgs; [
        bluez
        parse-name-aliases
        parse-name-icons
      ];
      text = builtins.readFile ./get-bluetooth;
    })

    (pkgs.writeShellApplication {
      name = "get-date";
      runtimeInputs = with pkgs; [
        coreutils # date
        gnused
      ];
      text = builtins.readFile ./get-date;
    })
    (pkgs.writeShellApplication {
      name = "get-wifi-bars";
      runtimeInputs = with pkgs; [
        networkmanager # nmcli
        gnused
      ];
      text = builtins.readFile ./get-wifi-bars;
    })

    (pkgs.writeShellApplication {
      name = "listen-workspaces";
      runtimeInputs = with pkgs; [
        gnused
        xorg.xprop
        get-workspaces-info
      ];
      text = builtins.readFile ./listen-workspaces;
    })
    (pkgs.writeShellApplication {
      name = "listen-wifi";
      runtimeInputs = with pkgs; [
        gnugrep
        networkmanager
        format-bytes
        coreutils
      ];
      text = my-utils.readRemoveStop ./listen-wifi;
    })
    (pkgs.writeShellApplication {
      name = "listen-audio";
      runtimeInputs = with pkgs; [
        pulseaudio # pactl
        get-mute
        get-volume
        get-sink
        coreutils # stdbuf
      ];
      text = builtins.readFile ./listen-audio;
    })
  ];
}
