(defpoll   date              :initial '{}'    :interval "1s" 'scripts/get-date.sh')
(defpoll   bluetooth         :initial '{}'    :interval "1s" 'scripts/get-bluetooth.sh')
;; (defpoll   bluetooth_devices :initial '[]'    :interval "2s" '~/.local/bin/bluetooth-manager info_devices')
(deflisten audio             :initial '{}'    'scripts/listen-audio.sh')
(deflisten ws_info           :initial '{}'    'scripts/listen-workspaces.sh')
(deflisten wifi_info         :initial '{}'    'scripts/listen-wifi.sh')
(defpoll   wifi_bars         :initial '4'     :interval '20s' 'scripts/get-wifi-bars.sh')
(defpoll   notifications     :initial 'false' :interval "1s" 'dunstctl is-paused')

(defvar force_expand_all false)
;; (defvar midrow_keys "[ \"a\", \"s\", \"d\", \"f\" ]")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;            TOPBAR            ;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defwidget divider []
    (box
        :class "divider"
        :valign "center"
    )
)
(defwidget numbered_ws_indicator [id state icon]
    (eventbox
        :onclick 'wmctrl -s ${id - 1}'
        (image
            :path 'ws-icons/${icon}-${state}.svg'
            :image-width 15
            :image-height 15
        )
    )
)
(defwidget extra_ws_indicator [state]
    (box
        :class "ws_dot ${state}"
        :width 5
        :height 5
    )
)
(defwidget numbered_ws []
    (box
        :class "numbered_ws_container"
        :spacing 8
        (for i in {ws_info["numbered_ws"]}
            (numbered_ws_indicator :id {i["id"]} :state {i["state"]} :icon {i["icon"]})
        )
    )
)
(defwidget extra_ws []
    (box
        :class "extra_ws_container"
        :orientation "vertical"
        :valign "center"
        :space-evenly false
        :spacing 4
        (extra_ws_indicator :state {ws_info["dashboard"]})
        (extra_ws_indicator :state {ws_info["scratchpad"]})
    )
)
(defwidget ws_bar []
    (box
        :class "ws_bar"
        :space-evenly false
        :spacing 10
        (extra_ws)
        (divider)
        (numbered_ws)
    )
)

(defwindow calendar_popup
    :monitor 0
    :geometry (geometry
        :x 0
        :y 62
        :width "15%"
        :anchor "top center"
    )
    :stacking "fg"
    :windowtype "dialog"

    (box
        :style "padding: 10px 20px 0 20px;"
        (calendar)
    )
)
(defvar date_bar_should_expand false)
(defwidget date_bar []
    (eventbox
        :onclick '${EWW_CMD} open calendar_popup'
        :onrightclick '${EWW_CMD} update force_expand_all=$([[ $(${EWW_CMD} get force_expand_all) == "false" ]] && echo "true" || echo "false")'
        :onhover '${EWW_CMD} update date_bar_should_expand=true'
        :onhoverlost '${EWW_CMD} update date_bar_should_expand=false'
        (box
            :class "date-container"
            :spacing 20
            :space-evenly false
            (box
                :space-evenly false
                :spacing 8
                (box
                    :class "date-test"
                    :space-evenly false
                    (label :text '${date["day-short"]}')
                    (revealer 
                        :transition "slideleft"
                        :reveal {date_bar_should_expand || force_expand_all}
                        (label :text '${date["day-remaining"]}')
                    )
                )
                (label :text " ${date["date"]}")
                (box
                    :space-evenly false
                    (label :text '${date["month-short"]}')
                    (revealer
                        :transition "slideleft"
                        :reveal {date_bar_should_expand || force_expand_all}
                        (label :text '${date["month-remaining"]} ${date["year"]}')
                    )
                )
            )
            (box
                :space-evenly false
                (box
                    :space-evenly false
                    (label :text '${date["hours"]}:${date["minutes"]}')
                    (revealer
                        :transition "slideleft"
                        :reveal {date_bar_should_expand || force_expand_all}
                        (label :text ':${date["seconds"]}')
                    )
                )
            )
        )
    )
)

(defwidget notification_stats []
    (box
        :visible {notifications == "true"}
        :style "padding: 5px 0;"
        :space-evenly false
        :spacing 8
        (image
            :path 'stats-icons/notifications_off.svg'
            :image-width 18 :image-height 18
        )
        (divider)
    )
)
(defvar wifi_stats_should_expand false)
(defwidget wifi_stats []
    (eventbox
        :onhover '${EWW_CMD} update wifi_stats_should_expand=true'
        :onhoverlost '${EWW_CMD} update wifi_stats_should_expand=false'
        (box
            :style "padding: 5px 0;"
            :space-evenly false
            :tooltip 'up: ${wifi_info["rx"]["val"]}/s, down: ${wifi_info["tx"]["val"]}/s'
            (box
                :visible {wifi_info["vpn"] != "Disconnected" }
                :style "padding: 0 8px 0 0;"
                :space-evenly false
                (image
                    :path 'stats-icons/wifi-vpn-key.svg'
                    :image-width 18 :image-height 18
                )
                (revealer
                    :transition "slideleft"
                    :reveal {(wifi_info["should_expand"] || wifi_stats_should_expand || force_expand_all) && wifi_info["connection"] != ""}
                    :style 'padding: 0 0 0 8px;'
                    (label :text {wifi_info["vpn"]})
                )
            )
            (image
                :path 'stats-icons/wifi-${wifi_info["connection"] == "" ? "disconnected" : wifi_bars}.svg'
                :image-width 18 :image-height 18
            )
            (revealer
                :transition "slideleft"
                :reveal {(wifi_info["should_expand"] || wifi_stats_should_expand || force_expand_all) && wifi_info["connection"] != ""}
                :style 'padding: 0 0 0 8px;'
                (box
                    :space-evenly false
                    :spacing 8
                    (label :text {wifi_info["connection"]})
                    (overlay
                        :class "cpu-overlay"
                        :height 20
                        :width 40
                        (graph
                            :class "temp-graph"
                            :max 23
                            :value {wifi_info["rx"]["pseudolog"]}
                            :time-range "20s"
                            :thickness 2
                        )
                        (graph
                            :class "cpu-graph"
                            :max 23
                            :value {wifi_info["tx"]["pseudolog"]}
                            :time-range "20s"
                            :thickness 2
                        )
                    )
                )
            )
        )
    )
)
;; (defwidget bluetooth_stats []
;;     (box
;;         :space-evenly false
;;         :visible {bluetooth["status"] == "connected"}
;;         :spacing 8
;;         (box
;;             (image
;;                 :visible {bluetooth["icon"] != ""}
;;                 :path 'stats-icons/bluetooth-${bluetooth["icon"]}.svg'
;;                 :image-width 16
;;                 :image-height 16
;;             )
;;             (label
;;                 :style 'color: #0099FF;'
;;                 :visible {bluetooth["icon"] == ""}
;;                 :text {bluetooth["device"]}
;;             )
;;         )
;;         (divider)
;;     )
;; )
;;
(defvar audio_stats_should_expand false)
(defwidget audio_stats []
    (eventbox
        :onhover "${EWW_CMD} update audio_stats_should_expand=true"
        :onhoverlost "${EWW_CMD} update audio_stats_should_expand=false"
        (box
            :space-evenly false
            :spacing 0
            (overlay
                (image 
                    :path 'stats-icons/volume${audio["volume"] == 0 ? "-zero" : ""}${audio["mute"] == "muted" ? "-muted" : ""}.svg'
                    :image-width 16 :image-height 16
                )
                (box
                    (circular-progress
                        :class 'volume-bar ${audio["mute"]}'
                        :value {audio["volume"] > 100 ? 40 : audio["volume"] * 40 / 100}
                        :start-at 20
                        :clockwise false
                        :thickness 2
                    )
                )
                (box
                    :visible {audio["volume"] > 100}
                    (circular-progress
                        :class 'highvolume-bar'
                        :value {audio ["volume"] <= 100 ? 0 : (audio["volume"] - 100) * 40 / 60}
                        :start-at 20
                        :clockwise false
                        :thickness 2
                    )
                )
            )
            (revealer
                :visible {audio["sink"]["name"] != "Main"}
                :transition 'slideright'
                :reveal {!(audio_stats_should_expand || force_expand_all)}
                (box
                    (image
                     :style 'padding: 0 0 0 6px;'
                        :visible {audio["sink"]["icon"] != ""}
                        :path 'stats-icons/sink-${audio["sink"]["icon"]}${audio["mute"] == "muted" ? "-muted" : ""}.svg'
                        :image-width 12
                        :image-height 12
                    )
                    (label
                        :style 'padding: 0 0 0 8px;'
                        :visible {audio["sink"]["icon"] == ""}
                        :text {audio["sink"]["name"]}
                    )
                )
            )
            (revealer 
                :style 'padding: 0 0 0 8px;'
                :transition 'slideleft'
                :reveal {audio_stats_should_expand || force_expand_all}
                (label :text '${audio["volume"]}%${audio["mute"] == "muted" ? " [muted]" : ""} on ${audio["sink"]["name"]}')
            )
        )
    )
)

(defwidget cpu_stats []
    (box
        :style "min-width: 80px;"
        (label :text '${round(EWW_CPU["avg"], 0)}%   ${round(EWW_TEMPS["K10TEMP_TCTL"], 0)}°C')
        ;; (overlay
        ;;     :class "cpu-overlay"
        ;;     :height 20
        ;;     :width 40
        ;;     :tooltip '${round(eww_cpu["avg"], 0)}% ${round(eww_temps["k10temp_tctl"], 0)}°c'
        ;;     (graph
        ;;         :class "temp-graph"
        ;;         :min 25
        ;;         :max 110
        ;;         :value {EWW_TEMPS["K10TEMP_TCTL"]}
        ;;         :time-range "20s"
        ;;         :thickness 2
        ;;     )
        ;;     (graph
        ;;         :class "cpu-graph"
        ;;         :max 110
        ;;         :value {EWW_CPU["avg"] + 10}
        ;;         :time-range "20s"
        ;;         :thickness 2
        ;;     )
        ;; )
    )
)

(defvar battery_stats_should_expand false)
(defwidget battery_stats []
    (eventbox
        :onhover '${EWW_CMD} update battery_stats_should_expand=true'
        :onhoverlost '${EWW_CMD} update battery_stats_should_expand=false'
        (box
            :class "battery-stats"
            :space-evenly false
            (overlay
                (image
                    :path 'stats-icons/battery${
                        EWW_BATTERY["BAT1"].status == "Charging" ? '-charging' : 
                        EWW_BATTERY["BAT1"].capacity <= 20 ? "-critical" : 
                        EWW_BATTERY["BAT1"].capacity <= 30 ? "-low" : 
                        ""
                    }.svg'
                    :image-height 12
                )
                (box
                    :style 'padding: 0px 4px 0 2px'
                    (scale
                        :class 'battery-bar ${EWW_BATTERY["BAT1"].status} ${EWW_BATTERY["BAT1"].capacity <= 30 ? "low" : ""} ${EWW_BATTERY["BAT1"].capacity <= 20 ? "critical" : ""}'
                        :value {EWW_BATTERY["BAT1"].capacity}
                        :active false
                        :onchange ""
                    )
                )
            )
            (revealer 
                :style 'padding: 0 0 0 8px;'
                :transition 'slideleft'
                :reveal {battery_stats_should_expand || force_expand_all}
                (label :text '${EWW_BATTERY["BAT1"].capacity}%')
            )
        )
    )
)
(defwidget stats_bar []
    (box
        :class "stats_bar"
        :style 'padding: 0 5px 0 0'
        :halign "end"
        :spacing 15
        :space-evenly false
        (notification_stats)
        (wifi_stats)
        (divider)
        ;; (bluetooth_stats)
        (audio_stats)
        (divider)
        (cpu_stats)
        (divider)
        (battery_stats)
    )
)

(defwindow topbar
    :monitor 0
    ;; :geometry (geometry :x 0 :y 10 :width "1900" :height "30px" :anchor "top center")
    :geometry (geometry :x 0 :y 0 :width "1920" :height "32px" :anchor "bottom center")
    :reserve (struts :distance "42px" :side "bottom")
    :stacking "bg"
    :windowtype "dock"
    ;; :style "border: 2px solid #388e3c"
    ;; :class "topbar"
    (centerbox
        :class "topbar_content"
        (ws_bar)
        (date_bar)
        (stats_bar)
    )
)
