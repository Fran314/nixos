#!/usr/bin/env python3

# Shadowbox
# The purpose of this software is to create a shadowbox around the specified
# geometry. This is used in usecases such as screen recording, where you want
# to specify the recorded area in a non-invasive way
#
# NOTE: This is basically a butchered version of the xborders utility
# from https://github.com/deter0/xborder
# Thanks to deter0 for providing the original software

import sys
import cairo
import gi

gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk, Gdk


def get_screen_size(display):  # TODO: Multiple monitor size support
    mon_geoms = [
        display.get_monitor(i).get_geometry() for i in range(display.get_n_monitors())
    ]

    x0 = min(r.x for r in mon_geoms)
    y0 = min(r.y for r in mon_geoms)
    x1 = max(r.x + r.width for r in mon_geoms)
    y1 = max(r.y + r.height for r in mon_geoms)

    return x1 - x0, y1 - y0


class ShadowBox(Gtk.Window):
    def __init__(self, x, y, width, height, screen_width, screen_height):
        super().__init__(type=Gtk.WindowType.POPUP)

        self.screen = self.get_screen()

        self.set_app_paintable(True)
        self.set_visual(self.screen.get_rgba_visual())

        self.set_role("shadowbox")
        self.set_title("shadowbox")

        self.box_x = x
        self.box_y = y
        self.box_width = width
        self.box_height = height
        self.screen_width = screen_width
        self.screen_height = screen_height

        self.resize(screen_width, screen_height)
        self.move(0, 0)

        # self.set_skip_taskbar_hint(True)
        # self.set_skip_pager_hint(True)
        # self.set_keep_above(True)

        self.set_accept_focus(False)
        self.set_focus_on_map(False)

        self.input_shape_combine_region(cairo.Region())

        self.show_all()

        self.connect("draw", self._draw)

    def _draw(self, _wid, ctx):
        ctx.save()
        ctx.set_source_rgba(0, 0, 0, 0.4)
        ctx.rectangle(0, 0, self.screen_width, self.box_y)
        ctx.rectangle(0, self.box_y, self.box_x, self.box_height)
        ctx.rectangle(
            self.box_x + self.box_width,
            self.box_y,
            self.screen_width - self.box_x - self.box_width,
            self.box_height,
        )
        ctx.rectangle(
            0,
            self.box_y + self.box_height,
            self.screen_width,
            self.screen_height - self.box_y - self.box_height,
        )
        ctx.fill()

        ctx.restore()


screen_width, screen_height = get_screen_size(Gdk.Display.get_default())
X = 0
Y = 0
WIDTH = 10
HEIGHT = 10
try:
    X = int(sys.argv[1])
    Y = int(sys.argv[2])
    WIDTH = int(sys.argv[3])
    HEIGHT = int(sys.argv[4])
except Exception:
    print("Invalid arguments")

ShadowBox(X, Y, WIDTH, HEIGHT, screen_width, screen_height)
Gtk.main()
