{ lib, inputs, pkgs, pkgs-unstable, config, ... }:

let
	cfg = config.my.options.utils;
in
with lib; {
    options.my.options.utils = {
		keep-images = mkEnableOption "";
		batch-rename = mkEnableOption "";
		img-resize = mkEnableOption "";
		canon-import = mkEnableOption "";
		android-backup = mkEnableOption "";
		uex = mkEnableOption "";
		ctex = mkEnableOption "";
		new-project = mkEnableOption "";
		bookletify = mkEnableOption "";
		poke2term = mkEnableOption "";
    };

    config = {
        environment.systemPackages = [
            (mkIf cfg.keep-images (pkgs.callPackage ./keep-images {}))

            (mkIf cfg.batch-rename
				(pkgs.writeShellApplication {
					name = "batch-rename";
					runtimeInputs = with pkgs; [
						gnused
					];
					text = builtins.readFile ./batch-rename;
				})
			)

            (mkIf cfg.img-resize
				(pkgs.writeShellApplication {
					name = "img-resize";
					runtimeInputs = with pkgs; [
						imagemagick
					];
					text = builtins.readFile ./img-resize;
				})
			)
			
			(mkIf cfg.canon-import
				(pkgs.writeShellApplication {
					name = "canon-import";
					runtimeInputs = with pkgs; [
						bash
						gnused
						exiftool
					];
					text = builtins.readFile ./canon-import;
				})
			)

			(mkIf cfg.android-backup
				(pkgs.writeShellApplication {
					name = "android-backup";
					runtimeInputs = with pkgs; [
						rsync
						pkgs-unstable.android-file-transfer	# needs unstable only to get v4.4 which fixes an 
						#									  issue that prevents it from working with Pixel 9
						util-linux
					];
					text = builtins.readFile ./android-backup;
				})
			)

			(mkIf cfg.uex
				(pkgs.writeShellApplication {
					name = "uex";
					runtimeInputs = with pkgs; [
						gnutar
						zip
						unzip
						rar
						unrar
						util-linux
					];
					text = builtins.readFile ./uex;
				})
			)

            (mkIf cfg.ctex
				(pkgs.writeShellApplication {
					name = "ctex";
					runtimeInputs = with pkgs; [
						bash
						texliveFull
						entr
					];
					text = builtins.readFile ./ctex;
				})
			)

            (mkIf cfg.new-project
				(pkgs.writeShellApplication {
					name = "new-project";
					runtimeInputs = with pkgs; [
						nodejs
						git
					];
					text = builtins.readFile ./new-project;
				})
			)

            (mkIf cfg.bookletify
				(pkgs.writers.writePython3Bin "bookletify" {
					libraries = with pkgs; [
						python3Packages.pypdf2
					];
					flakeIgnore = [
						"E265"  # Ignore error generated by shebang (block comment should start with '# ')
						"E501"  # Ignore 'line too long' errors
					];
				} (builtins.readFile ./bookletify))
			)

            (mkIf cfg.poke2term
				(pkgs.writers.writePython3Bin "poke2term" {
					libraries = [
						pkgs.python3Packages.requests
						pkgs.python3Packages.pillow
					];
					flakeIgnore = [
						"E265"  # Ignore error generated by shebang (block comment should start with '# ')
						"E501"  # Ignore 'line too long' errors
					];
				} (builtins.readFile ./poke2term))
			)
        ];
    };
}
