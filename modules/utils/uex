#!/usr/bin/env bash

print_help() {
	echo "uex (universal-extract)"
    echo ""
    echo "extract any type of archive"
    echo ""
    echo "USAGE: uex [OPTIONS] ARCHIVE [DESTINATION]"
    echo ""
    echo "OPTIONS:"
    echo "    -h, --help             print help text"
	echo "    -e, --efficient        extract efficiently (if the root of the archive"
	echo "                           contains a single nested path of directories before"
	echo "                           the actual content, it strips the initial nestedness)"
    echo ""
	echo "If no DESTINATION is specified, it defaults to a directory inside the current"
	echo "one, with the same name as the archive stripped of the extension(s)"
	echo ""
	echo "The supported archie types are: tar, tar.gz, zip, rar"
	#    "--------------------------------------------------------------------------------"
}

exit_help() {
    print_help
    exit 0
}

exit_error() {
    print_help
    echo ""
    echo "ERROR: $1"
    exit 1
}


POSITIONAL_ARGS=()
EFFICIENT=0

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            exit_help
            ;;
		-e|--efficient)
			EFFICIENT=1
			shift
			;;
        -*)
            exit_error "Unknown option '$1'"
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}"

if [[ -z ${1+x} ]]
then
    exit_error "No archive specified"

elif [[ ! -f $1 ]]
then
	exit_error "The given archive does not exist"

elif [[ ! "$1" =~ \.(zip|tar|tar\.gz|rar)$ ]]
then
	exit_error "Unsupported archive type"
fi

ARCHIVE="$1"

[[ "$ARCHIVE" =~ \.zip$ ]]     && TYPE="zip"    && NAME=${ARCHIVE%.zip}
[[ "$ARCHIVE" =~ \.tar$ ]]     && TYPE="tar"    && NAME=${ARCHIVE%.tar}
[[ "$ARCHIVE" =~ \.tar\.gz$ ]] && TYPE="tar-gz" && NAME=${ARCHIVE%.tar.gz}
[[ "$ARCHIVE" =~ \.rar$ ]]     && TYPE="rar"    && NAME=${ARCHIVE%.rar}

if [[ -z ${2+x} ]]
then
	DESTINATION="./$NAME"
	mkdir -p "$DESTINATION"
elif [[ ! -d "$2" ]]
then
	exit_error "The destination does not exist"
else
	DESTINATION="$2"
fi

if [[ $EFFICIENT -eq 0 ]]
then
	[[ "$TYPE" == "zip" ]]    && unzip "$ARCHIVE" -d "$DESTINATION"
	[[ "$TYPE" == "tar" ]]    && tar -xf "$ARCHIVE" -C "$DESTINATION"
	[[ "$TYPE" == "tar-gz" ]] && tar -xzf "$ARCHIVE" -C "$DESTINATION"
	[[ "$TYPE" == "rar" ]]    && unrar x "$ARCHIVE" "$DESTINATION"
else
	TEMP=$(mktemp -d)
	echo "$TEMP"

	[[ "$TYPE" == "zip" ]]    && unzip "$ARCHIVE" -d "$TEMP"
	[[ "$TYPE" == "tar" ]]    && tar -xf "$ARCHIVE" -C "$TEMP"
	[[ "$TYPE" == "tar-gz" ]] && tar -xzf "$ARCHIVE" -C "$TEMP"
	[[ "$TYPE" == "rar" ]]    && unrar x "$ARCHIVE" "$TEMP"
	
	mapfile -t CONTENT < <(find "$TEMP" -mindepth 1 -maxdepth 1)
	while [[ "${#CONTENT[@]}" -eq 1 ]] && [[ -d "${CONTENT[0]}" ]]
	do
		mv "${CONTENT[0]}"/* "$TEMP/."
		rm -r "${CONTENT[0]:?}"
		mapfile -t CONTENT < <(find "$TEMP" -mindepth 1 -maxdepth 1)
	done

	mv "$TEMP/"* "$DESTINATION"
fi

echo "Done"
