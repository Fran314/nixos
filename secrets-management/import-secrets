#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

print_help() {
	#    "--------------------------------------------------------------------------------"
	echo "import-secrets"
	echo ""
	echo "import secrets from a specified source"
	echo ""
	echo "USAGE: import-secrets [OPTIONS] HOSTNAME SOURCE"
	echo ""
	echo "OPTIONS:"
	echo "    -h, --help             print help text"
	echo ""
	echo "HOSTNAME specifies which machines (hence what type of secrets) are going to be"
	echo "  checked. The allowed values are: 'latias', 'kyogre', 'umbreon'"
	echo ""
	echo "SOURCE specifies from where import the secrets. This is usually the path to a"
	echo "  directory with name format 'YYYY-MM-DD_HH-MM-SS' at the root of the mounted"
	echo "  USB. Since the import-scripts file should also be located there, it is"
	echo "  suggested to cd in that directory, use that copy of import-secrets and use '.'"
	echo "  as SOURCE"
}

exit_help() {
	print_help
	exit 0
}

exit_error() {
	print_help
	echo ""
	echo "ERROR: $1"
	exit 1
}

POSITIONAL_ARGS=()

if [[ $(whoami) != "root" ]]; then
	exit_error "This script must be run as root"
fi

while [[ $# -gt 0 ]]; do
	case $1 in
	-h | --help)
		exit_help
		;;
	-*)
		exit_error "Unknown option '$1'"
		;;
	*)
		POSITIONAL_ARGS+=("$1") # save positional arg
		shift                   # past argument
		;;
	esac
done

set -- "${POSITIONAL_ARGS[@]}"

if [[ -z ${1+x} ]]; then
	exit_error "No hostname specified"
elif [[ "$1" != "latias" ]] && [[ "$1" != "kyogre" ]] && [[ "$1" != "umbreon" ]]; then
	exit_error "Unknown hostname '$1'. Hostname must be one of the following: 'latias', 'kyogre', 'umbreon'"
fi

if [[ -z ${2+x} ]]; then
	exit_error "No source specified"
elif [[ ! -d "$2" ]]; then
	exit_error "Source '$2' does not exist"
fi

HSTNM="$1"
SOURCE="$2"

decrypt() {
	FROM=$1
	TO=$2

	for file in "${@:3}"; do
		if [[ -f "$TO/$file" ]]; then
			echo "▶ importing '$FROM/$file.gpg'. File already exists, checking that it matches..."
			gpg --batch --passphrase "$PASSPHRASE" --output - --decrypt "$FROM/$file.gpg" >/dev/null || {
				echo "✖ error occurred when decrypting '$FROM/$file.gpg'"
				echo ""
				return 1
			}
			gpg --batch --passphrase "$PASSPHRASE" --output - --decrypt "$FROM/$file.gpg" | cmp "$TO/$file" - || {
				echo "✖ error occurred when importing '$FROM/$file.gpg'. File already exists and appears not equal to imported file"
				echo ""
				return 1
			}
			echo "✔ '$TO/$file' already exists and matches decryption of '$FROM/$file.gpg', skipped"
			echo ""
		else
			echo "▶ decrypting '$FROM/$file.gpg'..."
			gpg --batch --passphrase "$PASSPHRASE" --output "$TO/$file" --decrypt "$FROM/$file.gpg" || {
				echo "✖ error occurred when decrypting '$FROM/$file.gpg'"
				echo ""
				return 1
			}
			echo "✔ succesfully decrypted '$FROM/$file.gpg'"
			echo ""
		fi
	done
}

check_sum() {
	FROM=$1

	echo "▶ checking sha256sums at '$FROM'"
	pushd "$FROM" >/dev/null || return 1
	sha256sum -c sha256sums.txt || {
		echo "✖ error occurred when checking sha256sums at '$FROM'"
		echo ""
		return 1
	}
	echo "✔ succesfully checked sha256sums"
	echo ""

	popd >/dev/null || return 1
}

symlink() {
	TARGET=$1
	LINK_NAME=$2

	echo "▶ creating symlink '$LINK_NAME' with target '$TARGET'"
	if [[ -e "$LINK_NAME" ]]; then
		if [[ ! -L "$LINK_NAME" ]]; then
			echo "✖ error occurred: '$LINK_NAME' exists and is not a symlink"
			echo ""
			return 1

		fi

		if [[ $(realpath "$LINK_NAME") != "$TARGET" ]]; then
			echo "✖ error occurred: '$LINK_NAME' exists with wrong target '$(realpath "$LINK_NAME")'"
			echo ""
			return 1
		fi
		echo "✔ '$LINK_NAME' already exists and points to correct target, skipped"
		echo ""
		return 0
	fi

	ln -s "$TARGET" "$LINK_NAME" || {
		echo "✖ error occurred when creating symlink '$LINK_NAME'"
		echo ""
		return 1
	}

	echo "✔ succesfully created symlink '$LINK_NAME'"
	echo ""
}

read -p "Insert passphrase: " -rs PASSPHRASE
echo ""
echo ""

#
#
# --- SSH --- #
echo "Importing SSH keys..."
DIR="$SOURCE/ssh/$HSTNM"

ENDPOINT="/home/baldo/.ssh"
if [[ ! -d "$ENDPOINT" ]]; then
	mkdir -p "$ENDPOINT"
	chown baldo:users "$ENDPOINT"
fi

import_ssh() {
	check_sum "$DIR" || return 1

	decrypt "$DIR" "$ENDPOINT" \
		id_ed25519 \
		id_ed25519.pub \
		sha256sums.txt ||
		return 1

	check_sum "$ENDPOINT" || return 1

	symlink "$ENDPOINT/id_ed25519" /root/.ssh/id_ed25519 || return 1
	symlink "$ENDPOINT/id_ed25519.pub" /root/.ssh/id_ed25519.pub || return 1

	chmod 600 "$ENDPOINT/id_ed25519" || return 1
	chown baldo:users "$ENDPOINT/id_ed25519"
	chmod 644 "$ENDPOINT/id_ed25519.pub" || return 1
	chown baldo:users "$ENDPOINT/id_ed25519.pub"

	return 0
}

import_ssh 2>&1 | awk '{ print "    " $0 }' && SSH_EXIT=0 || SSH_EXIT=$?

if [[ "$SSH_EXIT" -eq 0 ]]; then
	echo -e "  \033[1;32m✔ sucessfully\033[0m imported SSH keys"
else
	echo -e "  \033[1;31m✖ error\033[0m imported SSH keys"
fi
echo ""
# --- --- #
#
#

GLOBAL_EXIT=0
[[ $SSH_EXIT -gt $GLOBAL_EXIT ]] && GLOBAL_EXIT=$SSH_EXIT

if [[ $GLOBAL_EXIT -eq 0 ]]; then
	echo "Import completed succesfully!"
else
	echo "Import completed with errors"
fi
exit "$GLOBAL_EXIT"
