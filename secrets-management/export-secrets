#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

print_help() {
	#    "--------------------------------------------------------------------------------"
	echo "export-secrets"
	echo ""
	echo "export secrets to a specified endpoint"
	echo ""
	echo "USAGE: export-secrets [OPTIONS] HOSTNAME ENDPOINT"
	echo ""
	echo "OPTIONS:"
	echo "    -h, --help             print help text"
	echo ""
	echo "HOSTNAME specifies which machines (hence what type of secrets) are going to be"
	echo "  checked. The allowed values are: 'latias', 'kyogre', 'umbreon'"
	echo ""
	echo "ENDPOINT specifies where to export the secrets. This is usually wherever you"
	echo "  mounted your USB"
}

exit_help() {
	print_help
	exit 0
}

exit_error() {
	print_help
	echo ""
	echo "ERROR: $1"
	exit 1
}

POSITIONAL_ARGS=()

if [[ $(whoami) != "root" ]]; then
	exit_error "This script must be run as root"
fi

while [[ $# -gt 0 ]]; do
	case $1 in
	-h | --help)
		exit_help
		;;
	-*)
		exit_error "Unknown option '$1'"
		;;
	*)
		POSITIONAL_ARGS+=("$1") # save positional arg
		shift                   # past argument
		;;
	esac
done

set -- "${POSITIONAL_ARGS[@]}"

if [[ -z ${1+x} ]]; then
	exit_error "No hostname specified"
elif [[ "$1" != "latias" ]] && [[ "$1" != "kyogre" ]] && [[ "$1" != "umbreon" ]]; then
	exit_error "Unknown hostname '$1'. Hostname must be one of the following: 'latias', 'kyogre', 'umbreon'"
fi

if [[ -z ${2+x} ]]; then
	exit_error "No endpoint specified"
elif [[ ! -d "$2" ]]; then
	exit_error "Endpoint '$2' does not exist"
fi

SCRIPTDIR=$(dirname "$0")
HSTNM="$1"

TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
ENDPOINT="$2/$TIMESTAMP"
mkdir -p "$ENDPOINT"

encrypt() {
	FROM=$1
	TO=$2

	for file in "${@:3}"; do
		echo "▶ encrypting '$FROM/$file'..."
		gpg --batch --passphrase "$PASSPHRASE" --output "$TO/$file.gpg" --symmetric "$FROM/$file" || {
			echo "✖ error occurred when encrypting '$FROM/$file'"
			echo ""
			return 1
		}
		echo "✔ succesfully encrypted '$FROM/$file'"
		echo ""

		echo "▶ checking that '$TO/$file.gpg' correctly decrypts to '$FROM/$file'"
		gpg --batch --passphrase "$PASSPHRASE" --output - --decrypt "$TO/$file.gpg" | cmp "$FROM/$file" - || {
			echo "✖ error occurred when checking encryption of '$TO/$file.gpg'"
			echo ""
			return 1
		}
		echo "✔ succesfully checked '$FROM/$file' decryption"
		echo ""
	done
}

generate_sum() {
	FROM=$1

	echo "▶ generating sha256sums in '$FROM'"
	pushd "$FROM" >/dev/null || return 1

	for file in "${@:2}"; do
		echo "▶ generating sha256sum for '$FROM/$file'"
		sha256sum "$file" >>"sha256sums.txt" || {
			echo "✖ error occurred when generating sha256sum for '$FROM/$file'"
			echo ""
			return 1
		}
		echo "✔ succesfully generated sha256sum for '$FROM/$file'"
		echo ""
	done

	popd >/dev/null || return 1
}

check_sum() {
	FROM=$1

	echo "▶ checking sha256sums at '$FROM'"
	pushd "$FROM" >/dev/null || return 1
	sha256sum -c sha256sums.txt || {
		echo "✖ error occurred when checking sha256sums at '$FROM'"
		echo ""
		return 1
	}
	echo "✔ succesfully checked sha256sums"
	echo ""

	popd >/dev/null || return 1
}

read -p "Insert passphrase: " -rs PASSPHRASE
echo ""
read -p "Insert passphrase again: " -rs PASSPHRASE2
echo ""
if [[ "$PASSPHRASE" != "$PASSPHRASE2" ]]; then
	echo "Passphrases do not match. Aborting..."
	exit 1
fi
echo ""

#
#
# --- SCRIPTS --- #
echo "Exporting scripts..."

export_scripts() {
	cp "$SCRIPTDIR/import-secrets" "$ENDPOINT/import-secrets" || {
		echo "✖ error occurred when copying import scripts to endpoint"
		echo ""
		return 1
	}
	cmp "$SCRIPTDIR/import-secrets" "$ENDPOINT/import-secrets" || {
		echo "✖ error occurred when comparing exported import script to source"
		echo ""
		return 1
	}

	cp "$SCRIPTDIR/check-export-integrity" "$ENDPOINT/check-integrity" || {
		echo "✖ error occurred when copying integrity script to endpoint"
		echo ""
		return 1
	}
	cmp "$SCRIPTDIR/check-export-integrity" "$ENDPOINT/check-integrity" || {
		echo "✖ error occurred when comparing exported integrity script to source"
		echo ""
		return 1
	}

	generate_sum "$ENDPOINT" import-secrets check-integrity || return 1
	check_sum "$ENDPOINT" || return 1
}

echo -e "  \033[1;34m▶ exporting\033[0m scripts"
export_scripts 2>&1 | awk '{ print "    " $0 }' && IMPORT_EXIT=0 || IMPORT_EXIT=$?

if [[ "$IMPORT_EXIT" -eq 0 ]]; then
	echo -e "  \033[1;32m✔ sucessfully\033[0m exported scripts"
else
	echo -e "  \033[1;31m✖ error\033[0m exporting scripts"
fi
echo ""
# --- --- #
#
#

#
#
# --- SSH --- #
echo "Exporting SSH keys..."
DIR="$ENDPOINT/ssh/$HSTNM"

export_ssh() {
	mkdir -p "$DIR" || return 1

	encrypt /home/baldo/.ssh "$DIR" \
		id_ed25519 \
		id_ed25519.pub \
		sha256sums.txt ||
		return 1

	generate_sum "$DIR" \
		id_ed25519.gpg \
		id_ed25519.pub.gpg \
		sha256sums.txt.gpg ||
		return 1
	check_sum "$DIR" || return 1

	return 0
}

echo -e "  \033[1;34m▶ exporting\033[0m ssh keys"
export_ssh 2>&1 | awk '{ print "    " $0 }' && SSH_EXIT=0 || SSH_EXIT=$?

if [[ "$SSH_EXIT" -eq 0 ]]; then
	echo -e "  \033[1;32m✔ sucessfully\033[0m exported SSH keys"
else
	echo -e "  \033[1;31m✖ error\033[0m exporting SSH keys"
fi
echo ""
# --- --- #
#
#

GLOBAL_EXIT=0
[[ $IMPORT_EXIT -gt $GLOBAL_EXIT ]] && GLOBAL_EXIT=$IMPORT_EXIT
[[ $SSH_EXIT -gt $GLOBAL_EXIT ]] && GLOBAL_EXIT=$SSH_EXIT

if [[ $GLOBAL_EXIT -eq 0 ]]; then
	echo "Export completed succesfully!"
else
	echo "Export completed with errors"
fi
exit "$GLOBAL_EXIT"
